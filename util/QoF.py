"""
__author__ = "Mohammed Aldosari"
__date__ = 2/22/24
__version__ = "1.0"
__license__ = "MIT style license file"
"""

from typing import Tuple
import numpy as np

"""
QoF: 
    A module for evaulating the quality/goodness of fit
    Supports both symmetric and asymmetric metrics

Functions
----------
smape: 
    def smape(y: np.ndarray, y_pred: np.ndarray) -> float:

mae:
    def mae(y: np.ndarray, y_pred: np.ndarray) -> float:

sst:
    def sst(y: np.ndarray) - > float:

sse:
    def sse(y: np.ndarray, y_pred: np.ndarray) -> float:

r2:
    def r2(y: np.ndarray, y_pred: np.ndarray) -> float:

mse:
    def mse(y: np.ndarray, y_pred: np.ndarray) -> float:

rmse:
    def rmse(y: np.ndarray, y_pred: np.ndarray) -> float:

rae:
    def rae(y: np.ndarray, y_pred: np.ndarray) -> float:
"""


def smape(y: np.ndarray, y_pred: np.ndarray) -> float:
    """
    A function to calculate the symmetric mean absolute percentage error (sMAPE).

    Arguments
    ----------
    y: np.ndarray
        the response data
    y_pred: np.ndarray
        the predicted/forecasted outputs

    Returned Values
    ----------
    smape : float
    """
    
    return 200 * np.sum(np.abs(y - y_pred) / (np.abs(y) + np.abs(y_pred))) / len(y)


def mae(y: np.ndarray, y_pred: np.ndarray) -> float:
    """
    A function to calculate the mean absolute error (MAE).

    Arguments
    ----------
    y: np.ndarray
        the response data
    y_pred: np.ndarray
        the predicted/forecasted outputs

    Returned Values
    ----------
    mae : float
    """
    
    return np.sum(np.abs(y - y_pred)) / len(y)


def sst(y: np.ndarray) -> float:
    """
    A function to calculate the sum of squares total (SST).

    Arguments
    ----------
    y: np.ndarray
        the response data

    Returned Values
    ----------
    sst : float
    """
    
    return np.sum((y - np.mean(y)) ** 2)


def sse(y: np.ndarray, y_pred: np.ndarray) -> float:
    """
    A function to calculate the sum of squared errors (SSE).

    Arguments
    ----------
    y: np.ndarray
        the response data
    y_pred: np.ndarray
        the predicted/forecasted outputs

    Returned Values
    ----------
    sse : float
    """
    
    return np.sum((y - y_pred) ** 2)


def r2(y: np.ndarray, y_pred: np.ndarray) -> float:
    """
    A function to calculate R squared (r2).

    Arguments
    ----------
    y: np.ndarray
        the response data
    y_pred: np.ndarray
        the predicted/forecasted outputs

    Returned Values
    ----------
    r2 : float
    """
    
    return 1 - sse(y, y_pred) / sst(y)


def mse(y: np.ndarray, y_pred: np.ndarray) -> float:
    """
    A function to calculate mean squared error (MSE).

    Arguments
    ----------
    y: np.ndarray
        the response data
    y_pred: np.ndarray
        the predicted/forecasted outputs

    Returned Values
    ----------
    mse : float
    """
    
    return sse(y, y_pred) / len(y)


def rmse(y: np.ndarray, y_pred: np.ndarray) -> float:
    """
    A function to calculate root mean squared error (RMSE).

    Arguments
    ----------
    y: np.ndarray
        the response data
    y_pred: np.ndarray
        the predicted/forecasted outputs

    Returned Values
    ----------
    rmse : float
    """
    
    return np.sqrt(mse(y, y_pred))


def rae(y: np.ndarray, y_pred: np.ndarray) -> float:
    """
    A function to calculate relative absolute error (RAE).

    Arguments
    ----------
    y: np.ndarray
        the response data
    y_pred: np.ndarray
        the predicted/forecasted outputs

    Returned Values
    ----------
    rae : float
    """
    
    y_mean = np.mean(y)
    squared_error_num = np.sum(np.abs(y - y_pred))
    squared_error_den = np.sum(np.abs(y - y_mean))
    rae_loss = squared_error_num / squared_error_den
    return rae_loss

def get_metrics(actual, forecasts, args) -> Tuple[int, float, float, float]:
    """
    A function used to calculate and display the metrics assessing the forecasting abilities of a given model.
    I can be extended to have more metrics based on requirements.

    Arguments
    ----------
    actual: ndarray[float]
        the actual values generated by a given model.
    forecasts: ndarray[float]
        the forecasts are generated by the same model.
    args: dict
        a dictionary containing all configuration parameters (used for calculating the metrics).
        serves as an easy way to access the configuration parameters.

    Returned Values
    ----------
    len(actual) : int
    mse_ : float
    mae_ : float
    smape : float
    """
    
    y = actual.flatten()
    y_pred = forecasts.flatten()
    mse_ = mse(y, y_pred)
    mae_ = mae(y, y_pred)
    smape_ = smape(y, y_pred)
    return len(actual), mse_, mae_, smape_
